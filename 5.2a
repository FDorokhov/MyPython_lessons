Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети, надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.
Пример адреса сети (все биты хостовой части равны нулю):
10.0.1.0/24
190.1.0.0/16

Пример адреса хоста:
10.0.1.1/24 - хост из сети 10.0.1.0/24
10.0.5.195/28 - хост из сети 10.0.5.192/28
Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:
Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000
Проверить работу скрипта на разных комбинациях хост/маска, например: 10.0.5.195/28, 10.0.1.1/24

Подсказка:

Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля. То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет bin_ip = "00001010000000010000000111000011".

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4): 00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

#######################################################################################################################################################################

a=input('Введите адрес сети в формате 10.1.1.1/24 ')
Network = '''
Network:
{0:<8} {1:<8} {2:<8} {3:<8}
{0:08b} {1:08b} {2:08b} {3:08b}
'''
Mask = '''
Mask:
/{}'''
Mask2 = '''
{0:<8} {1:<8} {2:<8} {3:<8}
{0:08b} {1:08b} {2:08b} {3:08b}
'''
c= a.split('/')
ip = c[0]
mask = c[1]
ip=ip.split('.')
count_mask_net = int(mask)
count_mask_hosts = 32 - count_mask_net
count_mask_total = '1' * count_mask_net + '0' * count_mask_hosts
mask1 = count_mask_total[0:8]
mask2 = count_mask_total[8:16]
mask3 = count_mask_total[16:24]
mask4 = count_mask_total[24:32]
print(Network.format(int(ip[0]), int(ip[1]), int(ip[2]), int(mask4, 2)))
print(Mask.format(mask))
print(Mask2.format(int(mask1, 2), int(mask2, 2), int(mask3, 2), int(mask4, 2)))
